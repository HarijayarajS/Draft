use tracing_subscriber::{fmt, EnvFilter};
use tracing_appender::rolling;
use tracing::info;

pub fn init_logging() {
    // Terminal layer
    let terminal_layer = fmt::layer()
        .with_target(true)
        .with_writer(std::io::stdout);

    // File layer (daily rolling log file in ./logs)
    let file_appender = rolling::daily("./logs", "server.log");
    let (file_writer, _guard) = tracing_appender::non_blocking(file_appender);
    let file_layer = fmt::layer()
        .with_ansi(false)
        .with_writer(file_writer);

    // Initialize subscriber with both layers
    tracing_subscriber::registry()
        .with(EnvFilter::from_default_env().add_directive("debug".parse().unwrap()))
        .with(terminal_layer)
        .with(file_layer)
        .init();
}



use tracing_subscriber::{fmt, EnvFilter};
use tracing_appender::rolling;
use tracing::info;
use once_cell::sync::Lazy;
use std::sync::Mutex;

static FILE_GUARD: Lazy<Mutex<Option<tracing_appender::non_blocking::WorkerGuard>>> =
    Lazy::new(|| Mutex::new(None));

pub fn init_logging() {
    std::fs::create_dir_all("./logs").expect("Failed to create logs directory");

    let terminal_layer = fmt::layer()
        .with_target(true)
        .with_writer(std::io::stdout);

    let file_appender = rolling::daily("./logs", "server.log");
    let (file_writer, guard) = tracing_appender::non_blocking(file_appender);
    *FILE_GUARD.lock().unwrap() = Some(guard); // hold guard

    let file_layer = fmt::layer()
        .with_ansi(false)
        .with_writer(file_writer);

    tracing_subscriber::registry()
        .with(EnvFilter::from_default_env().add_directive("debug".parse().unwrap()))
        .with(terminal_layer)
        .with(file_layer)
        .init();
}